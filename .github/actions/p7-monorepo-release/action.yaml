name: Monorepo release
description: Akce pro vytvoření release pro P7 produkty

inputs:
  version:
    description: 'Version (patch|minor|major|first-minor)'
    required: true
  gh-token:
    required: true
    description: "GitHub token"
  dry-run:
    description: "Spustí release v režimu dry-run (true|false)"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Validate dry-run input
      id: dryrun
      shell: bash
      run: |
        DRYRUN="${{ inputs.dry-run }}"
        case "$DRYRUN" in
          true|false) ;;
          *) echo "::error::Invalid dry-run value: $DRYRUN (allowed: true|false)"; exit 1 ;;
        esac

    - name: Stage Check
      id: stage
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        case "$VERSION" in
          patch) echo "stage=patch" >> "$GITHUB_OUTPUT" ;;
          minor|major|first-minor) echo "stage=release" >> "$GITHUB_OUTPUT" ;;
          *) echo "::error::Unknown version type: $VERSION"; exit 1 ;;
        esac

    - name: Detect if repository is already checked out
      id: detect
      shell: bash
      run: |
        set -euo pipefail
        has_checkout=false
        if git -C "$GITHUB_WORKSPACE" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
          has_checkout=true
        fi
        echo "has_checkout=$has_checkout" >> "$GITHUB_OUTPUT"

    - name: actions/checkout (only if missing)
      if: ${{ steps.detect.outputs.has_checkout != 'true' }}
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set Git user
      shell: bash
      run: |
        # Ošetříme safe.directory (aby Git nehlásil dubious ownership)
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        # Pokud jsme uvnitř repozitáře, použijeme
        if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
          git config user.name "${{ github.actor }}"
          git config user.email "action@github.com"
        else
          # Fallback – použijeme globální konfiguraci
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "action@github.com"
        fi

    - name: Configure Git auth for GitHub (fallback na git clone)
      shell: bash
      run: |
        # pro jistotu zamaskujeme token v logu
        echo "::add-mask::${{ inputs.gh-token }}"

        # 1) Composer: přidej HTTP Basic (vedle stávajícího github-oauth)
        printf '%s\n' 'COMPOSER_AUTH={"github-oauth":{"github.com":"${{ inputs.gh-token }}"},"http-basic":{"github.com":{"username":"x-access-token","password":"${{ inputs.gh-token }}"}},"github-protocols":["https"]}' >> "$GITHUB_ENV"

        # 2) Nastavení composer timeout na 20 minut
        printf '%s\n' 'COMPOSER_PROCESS_TIMEOUT=1200' >> "$GITHUB_ENV"

        # 3) Přesměruj https/ssh GitHub URL na https s tokenem
        git config url."https://x-access-token:${{ inputs.gh-token }}@github.com/".insteadOf "https://github.com/"
        git config url."https://x-access-token:${{ inputs.gh-token }}@github.com/".insteadOf "git@github.com:"
        git config url."https://x-access-token:${{ inputs.gh-token }}@github.com/".insteadOf "ssh://git@github.com/"
        # OAuth token pro GitHub
        composer config --auth github-oauth.github.com "${{ inputs.gh-token }}"
        # HTTP Basic na github.com (x-access-token / <token>)
        composer config --auth http-basic.github.com x-access-token "${{ inputs.gh-token }}"
        # Používej pouze HTTPS protokoly
        composer config github-protocols https

    - name: Zjisti cesty k Composer cache
      id: compcache
      shell: bash
      run: |
        echo "files=$(composer config cache-files-dir)" >> "$GITHUB_OUTPUT"
        echo "repo=$(composer config cache-repo-dir)"  >> "$GITHUB_OUTPUT"
        echo "vcs=$(composer config cache-vcs-dir)"    >> "$GITHUB_OUTPUT"

    # --- cache files (balíčky) ---
    - name: Cache composer files
      id: cache-files
      uses: actions/cache@v4
      with:
        path: ${{ steps.compcache.outputs.files }}
        key: composer-files-${{ runner.os }}-php81-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          composer-files-${{ runner.os }}-

    # --- cache repo (metadata) ---
    - name: Cache composer repo metadata
      id: cache-repo
      uses: actions/cache@v4
      with:
        path: ${{ steps.compcache.outputs.repo }}
        key: composer-repo-${{ runner.os }}-php81-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          composer-repo-${{ runner.os }}-

    # --- cache VCS klony ---
    - name: Cache composer VCS
      id: cache-vcs
      uses: actions/cache@v4
      with:
        path: ${{ steps.compcache.outputs.vcs }}
        key: composer-vcs-${{ runner.os }}-php81-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          composer-vcs-${{ runner.os }}-

    - name: Warm up composer caches (install bez skriptů)
      shell: bash
      run: |
        composer install --no-interaction --no-progress --no-scripts --prefer-dist

    # Doplňkový warm-up čistě pro metadata resolveru – nic nepřepíše
    - name: Warm up metadata (dry-run update)
      shell: bash
      if: |
        steps.cache-repo.outputs.cache-hit  != 'true'
      run: |
        composer update --dry-run --no-interaction --no-ansi

    - name: Compute version argument
      id: varg
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        if [ "$VERSION" = "first-minor" ]; then
          echo "value=0.1.0" >> "$GITHUB_OUTPUT"
        else
          echo "value=$VERSION" >> "$GITHUB_OUTPUT"
        fi

    - name: Release
      shell: bash
      run: |
        VERSION_ARG="${{ steps.varg.outputs.value }}"
        CMD="vendor/bin/monorepo-builder release $VERSION_ARG --stage ${{ steps.stage.outputs.stage }}"
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          CMD="$CMD --dry-run"
        fi
        echo "Running: $CMD"
        eval "$CMD"
